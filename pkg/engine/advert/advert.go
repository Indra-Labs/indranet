package advert

import (
	"time"
	
	"github.com/multiformats/go-multiaddr"
	
	"git-indra.lan/indra-labs/indra/pkg/crypto"
	"git-indra.lan/indra-labs/indra/pkg/util/splice"
)

const PeerMagic = "peer"

// Peer is the root identity document for an Indra peer. It is indexed by the
// Identity field, its public key. The slices found below it are derived via
// concatenation of strings with the keys and hashing to generate a derived
// field index, used to search the DHT for matches.
//
// The data stored for Peer must be signed with the key claimed by the Identity.
// For hidden services the address fields are signed in the DHT by the hidden
// service from their introduction solicitation, and the index from the current
// set is given by the hidden service.
type Peer struct {
	Identity  crypto.PubBytes
	RelayRate int
	// Addresses - first is address, nil for hidden services,
	// hidden services have more than one, 6 or more are kept active.
	Addresses []*Address
	Services  []Service
}

func (p *Peer) Magic() string {
	return PeerMagic
}

func (p *Peer) Encode(s *splice.Splice) (e error) {
	return nil
}

func (p *Peer) Decode(s *splice.Splice) (e error) {
	return nil
}

func (p *Peer) Len() int {
	return 0
}

func (p *Peer) GetOnion() interface{} {
	return nil
}

// Address entries are stored with an index generated by the combination of the
// 8 bit form of the index from the Peer struct field, after the word "address/"
// followed by a forward slash, and then hashed. A zero entry can be used to
// mark the end for scanning, if the list shrinks.
type Address struct {
	Index byte
	multiaddr.Multiaddr
	// Expiry is zero for relay's public address, and something for hidden
	// services.
	Expiry time.Time
	crypto.SigBytes
}

// Service stores a specification for the fee rate and the service port, which
// must be a well known port to match with a type of service, eg 80 for web, 53
// for DNS, etc. These are also attached to the Peer entry via concatenating
// "service/" and for this a 16 bit value allowing use of the full port
// range. A zero entry can be used also to mark the end when shrinking the
// list to indicate when to stop scanning for more entries.
type Service struct {
	Index           uint16
	Port, RelayRate int
}
