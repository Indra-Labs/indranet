package onions

import (
	"fmt"
	"github.com/indra-labs/indra/pkg/crypto"
	"github.com/indra-labs/indra/pkg/crypto/nonce"
	"github.com/indra-labs/indra/pkg/crypto/sha256"
	"github.com/indra-labs/indra/pkg/util/slice"
	"github.com/indra-labs/indra/pkg/util/splice"
	"github.com/multiformats/go-multiaddr"
	"net/netip"
	"time"
)
const AddressAdLen = nonce.IDLen +
	splice.AddrLen + 1 +
	slice.Uint64Len +
	crypto.SigLen

// Address entries are stored with an index generated by concatenating the bytes
// of the public key with a string path "/address/N" where N is the index of the
// address. This means hidden service introducers for values over zero.
// Hidden services have no value in the zero index, which is "<hash>/address/0".
type Address struct {
	ID        nonce.ID            // To ensure no repeating message
	Multiaddr multiaddr.Multiaddr // We only use a netip.AddrPort though.
	Index     byte                // This is the index in the slice from Peer.
	Expiry    time.Time           // zero for relay's public address (32 bit).
	Sig       crypto.SigBytes
}

func (a *Address) Decode(s *splice.Splice) (e error) {
	var addr *netip.AddrPort
	s.ReadID(&a.ID).ReadAddrPort(&addr).ReadByte(&a.Index).ReadTime(&a.Expiry)
	return
}

func (a *Address) Encode(s *splice.Splice) (e error) {
	var ip, port string
	if ip, e = a.Multiaddr.ValueForProtocol(multiaddr.P_IP4); fails(e) {
	}
	if ip == "" {
		if ip, e = a.Multiaddr.ValueForProtocol(multiaddr.P_IP6); fails(e) {
			return
		}
	}
	if port, e = a.Multiaddr.ValueForProtocol(multiaddr.P_TCP); fails(e) {
		return
	}
	var addr netip.AddrPort
	if addr, e = netip.ParseAddrPort(ip + ":" + port); fails(e) {
	}
	s.ID(a.ID).AddrPort(&addr).Byte(a.Index).Time(a.Expiry)
	return
}

func (a *Address) GetOnion() interface{} { return nil }

func (a *Address) Len() int { return AddressAdLen }

func (a *Address) Magic() string { return "" }

func (a *Address) Sign(prv *crypto.Prv) (e error) {
	s := splice.New(a.Len())
	if e = a.Encode(s); fails(e) {
		return
	}
	var b []byte
	if b, e = prv.Sign(s.GetUntil(s.GetCursor())); fails(e) {
		return
	}
	if len(b) != crypto.SigLen {
		return fmt.Errorf("signature incorrect length, got %d expected %d",
			len(b), crypto.SigLen)
	}
	copy(a.Sig[:], b)
	return nil
}

func (a *Address) Validate(s *splice.Splice) (pub *crypto.Pub) {
	h := sha256.Single(s.GetRange(0, nonce.IDLen+splice.AddrLen+1+
		slice.Uint64Len))
	var e error
	if pub, e = a.Sig.Recover(h); fails(e) {
	}
	return
}
