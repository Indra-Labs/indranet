package nonce

import (
	"crypto/rand"
	"encoding/base32"
	
	"git-indra.lan/indra-labs/indra/pkg/constant"
	"git-indra.lan/indra-labs/indra/pkg/crypto/sha256"
)

const IDLen = 8

// ID is a value generated by the first 8 bytes truncated from the values of a
// hash chain that reseeds from a CSPRNG at first use and every time it
// generates 2^16 (65536) new ID's.
type ID [IDLen]byte

// enc is a raw base32 encoder as IDs have a consistent set of extraneous
// characters after 13 digits and do not need check bytes as they are compact
// large numbers used as collision resistant nonces to identify items in lists.
var enc = base32.NewEncoding(constant.Based32Ciphers).EncodeToString

func (id ID) String() string {
	return enc(id[:])[:13]
}

var seed sha256.Hash
var counter uint16

func reseed() {
	if c, e := rand.Read(seed[:]); fails(e) && c != IDLen {
	}
	counter++
}

// NewID returns a random 8 byte nonce to be used as identifiers.
func NewID() (t ID) {
	if counter == 0 {
		reseed()
	}
	s := sha256.Single(seed[:])
	copy(seed[:], s[:])
	copy(t[:], seed[:IDLen])
	return
}
